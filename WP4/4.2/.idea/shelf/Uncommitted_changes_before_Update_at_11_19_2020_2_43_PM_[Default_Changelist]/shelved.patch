Index: Deliverables.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import Moment_of_Inertia_Wingbox as WB\r\nimport Torsional_Constant as TC\r\n\r\nWB.Ixx_graph()\r\nTC.Torsional_Stiffness_graph()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Deliverables.py	(revision c5571c3c570ebc84c997907792032afcb92618b0)
+++ Deliverables.py	(date 1605791951373)
@@ -2,4 +2,5 @@
 import Torsional_Constant as TC
 
 WB.Ixx_graph()
-TC.Torsional_Stiffness_graph()
\ No newline at end of file
+TC.Torsional_Stiffness_graph()
+TC.Torsional_Constant_graph()
\ No newline at end of file
Index: Moment_of_Inertia_Wingbox.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import scipy as sp\r\nimport matplotlib.pyplot as plt\r\n\r\n# Wing Box outer geometry (in chord length)\r\nWB_chord = 0.45\r\nWB_front_height = 0.1347\r\nWB_aft_height = 0.1091\r\n\r\n#Thickness To be determined\r\nt = 0.005\r\nE = 1   #To be changed\r\n\r\n\r\ndef chord_length(spanwise_location): #Spanwise location is y/(b/2)\r\n    Cr = 11.95\r\n    Ct = 3.59\r\n    Taper = 0.3\r\n    c = Cr - Cr*(1-Taper)*(spanwise_location)\r\n\r\n    return c\r\n\r\ndef Moment_of_Inertia_y(spanwise_location_iny):\r\n    b = 69.92  # Span\r\n    spanwise_location = spanwise_location_iny/(b/2)\r\n    chord = chord_length(spanwise_location)\r\n\r\n    # Geometrical parameters\r\n    h = WB_chord * chord\r\n    a = WB_aft_height * chord\r\n    b = WB_front_height * chord\r\n    c = 0.0163 * chord\r\n\r\n    h_inner = h - 2 * t\r\n    a_inner = a - 2 * t\r\n    b_inner = b - 2 * t\r\n    c_inner = c - 2 * t\r\n\r\n    Iperpendicular = ((h**3)*((a**2)*(4*a*b)+b**2))/(36*(a+b))\r\n    Iperpendicular_t = ((h_inner**3)*((a_inner**2)*(4*a_inner*b_inner)+b_inner**2))/(36*(a_inner+b_inner))\r\n    Iperpendicular_wingbox = Iperpendicular - Iperpendicular_t\r\n\r\n    Ichord = h*(4*a*b*c**2+3*a**2*b*c-3*a*b**2*c+a**4+b**4+2*a**3*b+a**2*c**2+a**3*c+2*a*b**3-c*b**3 + b**2 * c**2)/\\\r\n             (36*(a+b))\r\n    Ichord_t = (h_inner)*(4*a_inner*b_inner*c_inner**2+3*a_inner**2*b_inner*c_inner-3*a_inner*b_inner**2*c_inner+a_inner\r\n                          **4+b_inner**4+2*a_inner**3*b_inner+a_inner**2*c_inner**2+a_inner**3*c_inner+2*a_inner*b_inner\r\n                          **3-c_inner*b_inner** 3 + b_inner**2 * c_inner**2)/(36*(a_inner+b_inner))\r\n    I_chord_wingbox = Ichord - Ichord_t\r\n\r\n    return I_chord_wingbox\r\n\r\n\r\ndef Ixx_stringers(spanwise_location_iny):\r\n    b = 69.92 #Span\r\n    spanwise_location = spanwise_location_iny / (b / 2)\r\n    chord = chord_length(spanwise_location)\r\n\r\n    # Geometrical parameters\r\n    h = WB_chord * chord\r\n    a = WB_aft_height * chord\r\n    b = WB_front_height * chord\r\n    c = 0.0163 * chord\r\n\r\n    #Dimensions stringers\r\n    tS=0.005\r\n    aS=10*tS\r\n    bS=aS\r\n    n=4\r\n\r\n    #values trapezoid\r\n    Cchord=(h/3)*((2*a+b)/(a+b))\r\n\r\n    #Values Stringer\r\n    Astringer=tS*(aS*2-t)\r\n    Cy=(aS**2+aS*tS-tS**2)/(2*(2*aS-tS))\r\n    Cx=(aS**2+aS*tS-tS**2)/(2*(2*aS-tS))\r\n\r\n    #Parrallel axis stringers\r\n    I=[]\r\n    halfn=int(n/2)\r\n    n=int(n)\r\n    for i in range(0, halfn):\r\n        ParAxisOne=Astringer*(Cchord-h/(n-1)*i-Cy)**2\r\n        I.append(ParAxisOne)\r\n\r\n    for j in range(halfn, n):\r\n        ParAxisTwo=Astringer*(h/(n-1)*j-Cchord-Cy)**2\r\n        I.append(ParAxisTwo)\r\n\r\n    SumI=sum(I)*2\r\n\r\n    return SumI\r\n\r\n\r\ndef Ixx_in_y(spanwise_location_iny):\r\n    Ixx = Moment_of_Inertia_y(spanwise_location_iny)+Ixx_stringers(spanwise_location_iny) #error waiting for function\r\n\r\n    return Ixx\r\n\r\n\r\ndef Ixx_graph(ystart=0,yendmaxb=69.92):\r\n    Xaxis_lst = []  #spanwise_location in y\r\n    Yaxis_lst = []  #Ixx\r\n    for point in range(1, 501):\r\n        spanwise_location_iny = point/500*(yendmaxb-ystart)/2\r\n        Xaxis_lst.append(spanwise_location_iny)\r\n        Yaxis_lst.append(Ixx_in_y(spanwise_location_iny))\r\n\r\n    plt.plot(Xaxis_lst, Yaxis_lst)\r\n    plt.title('Ixx diagram')\r\n    plt.show()\r\n\r\n\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Moment_of_Inertia_Wingbox.py	(revision c5571c3c570ebc84c997907792032afcb92618b0)
+++ Moment_of_Inertia_Wingbox.py	(date 1605793082101)
@@ -97,11 +97,11 @@
     return Ixx
 
 
-def Ixx_graph(ystart=0,yendmaxb=69.92):
+def Ixx_graph(ystart=0.5,yendmaxb=69.92):
     Xaxis_lst = []  #spanwise_location in y
     Yaxis_lst = []  #Ixx
     for point in range(1, 501):
-        spanwise_location_iny = point/500*(yendmaxb-ystart)/2
+        spanwise_location_iny = point/500*(yendmaxb-ystart)/2 +ystart
         Xaxis_lst.append(spanwise_location_iny)
         Yaxis_lst.append(Ixx_in_y(spanwise_location_iny))
 
Index: Torsional_Constant.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import Moment_of_Inertia_Wingbox as WB\r\nfrom matplotlib import pyplot as plt\r\n\r\nt = WB.t\r\nG = 1 #Change\r\n\r\ndef Torsional_Constant_J(spanwise_location_iny):\r\n    b = 69.92\r\n\r\n    WB_chord = 0.45\r\n    WB_front_height = 0.1347\r\n    WB_aft_height = 0.1091\r\n\r\n\r\n    spanwise_location = spanwise_location_iny / (b / 2)\r\n    chord = WB.chord_length(spanwise_location)\r\n    h = WB_chord * chord\r\n    a = WB_aft_height * chord\r\n    b = WB_front_height * chord\r\n    c = 0.0163 * chord\r\n    hpt = (h**2 + ((b-a)/2)**2)**0.5\r\n\r\n\r\n    A = 0.5*(a+b)*h\r\n    s = a + b + 2 * hpt\r\n    J = 4*A**2/(s/t)\r\n\r\n    return J\r\n\r\ndef Torsional_Stiffness(spanwise_location_iny):\r\n    b = 69.92\r\n\r\n    GJ_L = G*Torsional_Constant_J(spanwise_location_iny)/(b/2)\r\n\r\n    return GJ_L\r\n\r\ndef Torsional_Stiffness_graph(ystart=0, yendmaxb=69.92):\r\n    Xaxis_lst = []  # spanwise_location in y\r\n    Yaxis_lst = []  # Ixx\r\n    for point in range(1, 501):\r\n        spanwise_location_iny = point / 500 * (yendmaxb - ystart) / 2\r\n        Xaxis_lst.append(spanwise_location_iny)\r\n        Yaxis_lst.append(Torsional_Stiffness(spanwise_location_iny))\r\n\r\n    plt.plot(Xaxis_lst, Yaxis_lst)\r\n    plt.title('Torsional Stiffness')\r\n    plt.show()\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Torsional_Constant.py	(revision c5571c3c570ebc84c997907792032afcb92618b0)
+++ Torsional_Constant.py	(date 1605793024014)
@@ -1,6 +1,11 @@
 import Moment_of_Inertia_Wingbox as WB
 from matplotlib import pyplot as plt
 
+
+
+
+
+
 t = WB.t
 G = 1 #Change
 
@@ -30,15 +35,15 @@
 def Torsional_Stiffness(spanwise_location_iny):
     b = 69.92
 
-    GJ_L = G*Torsional_Constant_J(spanwise_location_iny)/(b/2)
+    GJ_L = G*Torsional_Constant_J(spanwise_location_iny)/(spanwise_location_iny/2)
 
     return GJ_L
 
-def Torsional_Stiffness_graph(ystart=0, yendmaxb=69.92):
+def Torsional_Stiffness_graph(ystart=0.5, yendmaxb=69.92):
     Xaxis_lst = []  # spanwise_location in y
     Yaxis_lst = []  # Ixx
     for point in range(1, 501):
-        spanwise_location_iny = point / 500 * (yendmaxb - ystart) / 2
+        spanwise_location_iny = point / 500 * (yendmaxb - ystart) / 2 +ystart
         Xaxis_lst.append(spanwise_location_iny)
         Yaxis_lst.append(Torsional_Stiffness(spanwise_location_iny))
 
@@ -46,3 +51,15 @@
     plt.title('Torsional Stiffness')
     plt.show()
 
+def Torsional_Constant_graph(ystart=0.5, yendmaxb=69.92):
+    Xaxis_lst = []  # spanwise_location in y
+    Yaxis_lst = []  # Ixx
+    for point in range(1, 501):
+        spanwise_location_iny = point / 500 * (yendmaxb - ystart) / 2 +ystart
+        Xaxis_lst.append(spanwise_location_iny)
+        Yaxis_lst.append(Torsional_Constant_J(spanwise_location_iny))
+
+    plt.plot(Xaxis_lst, Yaxis_lst)
+    plt.title('Torsional Constant')
+    plt.show()
+
